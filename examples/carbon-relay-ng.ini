## Global settings ##

# instance id's distinguish stats of multiple relays.
# do not run multiple relays with the same instance id.
# supported variables:
#  ${HOST} : hostname
instance = "${HOST}"
max_procs = 2

admin_addr = "0.0.0.0:2004"
http_addr = "0.0.0.0:8081"
spool_dir = "/var/spool/carbon-relay-ng"
pid_file = "/var/run/carbon-relay-ng.pid"
## Logging ##
# one of critical error warning notice info debug
# see docs/logging.md for level descriptions
log_level = "notice"

## Validation of inputs ##
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
validation_level_legacy = "medium"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
validation_level_m20 = "medium"

# you can also validate that each series has increasing timestamps
validate_order = false

# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
bad_metrics_max_age = "24h"

# Blacklist
# See https://github.com/graphite-ng/carbon-relay-ng/blob/master/docs/config.md#Blacklist

blacklist = [
]

## Inputs ##

### plaintext Carbon ###
listen_addr = "0.0.0.0:2003"

### Pickle Carbon ###
pickle_addr = "0.0.0.0:2013"

### AMQP ###
[amqp]
amqp_enabled = false
amqp_host = "localhost"
amqp_port = 5672
amqp_user = "guest"
amqp_password = "guest"
amqp_vhost = "/graphite"
amqp_exchange = "metrics"
amqp_queue = ""
amqp_key = "#"
amqp_durable = false
amqp_exclusive = true

# Aggregators
# See https://github.com/graphite-ng/carbon-relay-ng/blob/master/docs/config.md#Aggregators

# Rewriters
# See https://github.com/graphite-ng/carbon-relay-ng/blob/master/docs/config.md#Rewriters

# Routes
<<<<<<< HEAD
# See https://github.com/graphite-ng/carbon-relay-ng/blob/master/docs/config.md#Routes
=======

[[route]]
# a plain carbon route that sends all data to the specified carbon (graphite) server
key = 'carbon-default'
type = 'sendAllMatch'
# prefix = ''
# substr = ''
# regex = ''
destinations = [
  '127.0.0.1:2003 spool=true pickle=false'
]

[[route]]
# all metrics with '=' in them are metrics2.0, send to carbon-tagger service
key = 'carbon-tagger'
type = 'sendAllMatch'
substr = '='
destinations = [
  '127.0.0.1:2006'
]

[[route]]
# send to the first carbon destination that matches the metric
key = 'analytics'
type = 'sendFirstMatch'
regex = '(Err/s|wait_time|logger)'
destinations = [
  'graphite.prod:2003 prefix=prod. spool=true pickle=true',
  'graphite.staging:2003 prefix=staging. spool=true pickle=true'
]

[[route]]
# a carbon route that sends to multiple carbon-cache servers
key = 'carbon-default'
type = 'consistentHashing'
prefix = 'consistentHashing'
# substr = ''
# regex = ''

replicationFactor = 2

destinations = [
  'carbon-cache1:2003 spool=true pickle=false',
  'carbon-cache2:2003 spool=true pickle=false',
  'carbon-cache3:2003 spool=true pickle=false'
]

#[[route]]
# example route for https://grafana.com/cloud/metrics
#key = 'grafanaNet'
#type = 'grafanaNet'
#addr = 'your-base-url/metrics'
#apikey = 'your-grafana.net-api-key'
#schemasFile = 'examples/storage-schemas.conf'
# require the destination address to have a valid SSL certificate
#sslverify=true
# Number of metrics to spool in in-memory buffer. since a message is typically around 100B this is 1GB
#bufSize=10000000
# When the in-memory buffer reaches capacity we can either "block" ingestion or "drop" metrics.
#blocking=false
# maximum number of metrics to send in a single batch to grafanaCloud
#flushMaxNum=5000
# maximum time in ms that metrics can wait in buffers before being sent.
#flushMaxWait=500
# time in ms, before giving up trying to send a batch of data to grafanaCloud.
#timeout=10000
# number of concurrent connections to use for sending data.
#concurrency=100

#[[route]]
# CloudWatch namespace and dimensions are meant to be set on a metric basis. However, plain carbon metrics do
# not include these information. Therefore, we fix them in the config for now.
#key = 'cloudWatch'
#type = 'cloudWatch'
#profile = 'for-development'
#region = 'eu-central-1'
#namespace = 'MyNamespace'
#dimensions = [
#   ['myDimension', 'myDimensionVal'],
#]
>>>>>>> add replicationFactor option

[init]
# init commands (DEPRECATED)
# see https://github.com/graphite-ng/carbon-relay-ng/blob/master/docs/config.md#Imperatives
cmds = [
]

## Instrumentation ##

[instrumentation]
# in addition to serving internal metrics via expvar, you can send them to graphite/carbon
# IMPORTANT: setting this to "" will disable flushing, and metrics will pile up and lead to OOM
# see https://github.com/graphite-ng/carbon-relay-ng/issues/50
# so for now you MUST send them somewhere. sorry.
# (Also, the interval here must correspond to your setting in storage-schemas.conf if you use grafana hosted metrics)
graphite_addr = "localhost:2003"
graphite_interval = 10000  # in ms
